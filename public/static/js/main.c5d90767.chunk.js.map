{"version":3,"sources":["context/SocketContext.js","hooks/useSocket.js","hooks/useMapbox.js","pages/MapaPage.js","MapsApp.js","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","transports","useState","online","setOnline","useEffect","connected","on","useSocket","Provider","value","mapboxgl","accessToken","puntoInicial","lng","lat","zoom","MapaPage","mapDiv","useRef","mapa","marcadores","movimientoMarcador","Subject","nuevoMarcador","coords","setCoords","setRef","useCallback","node","current","agregarMarcador","event","id","lngLat","marker","Marker","v4","setLngLat","addTo","setDraggable","next","target","getLngLat","actualizacionPosicion","map","Map","container","style","center","getCenter","toFixed","getZoom","nuevoMarcador$","movimientoMarcador$","useMapbox","useContext","Object","keys","key","subscribe","marcador","emit","className","ref","MapsApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5d90767.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createContext } from 'react';\r\nimport { useSocket } from '../hooks/useSocket'\r\n\r\nexport const SocketContext = createContext();\r\n\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n\r\n    const { socket, online } = useSocket('https://mapas-socket.herokuapp.com/');\r\n    \r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }}>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}","import { useEffect, useMemo, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nexport const useSocket = (serverPath) => {\r\n\r\n    const socket = useMemo(() => io.connect(serverPath, { transports: ['websocket'] }), [serverPath]);\r\n    const [online, setOnline] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setOnline(socket.connected);\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket.on('connect', () => setOnline(true));\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket.on('disconnect', () => setOnline(false));\r\n    }, [socket])\r\n\r\n    return {\r\n        socket,\r\n        online\r\n    }\r\n}","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { v4 } from 'uuid';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoia2lvYnJzMzMiLCJhIjoiY2t1eTdxczU2NTRxcDJub2Z2MXpiNXozbyJ9.yVlkX2W61pZXW8ilbmPpxA';\r\n\r\nexport const useMapbox = ( puntoInicial ) => {\r\n\r\n    const mapDiv = useRef();\r\n    const mapa = useRef();\r\n    const marcadores = useRef({});\r\n\r\n    // Obsevables de Rxjs\r\n    const movimientoMarcador = useRef( new Subject() );\r\n    const nuevoMarcador = useRef( new Subject() );\r\n\r\n    const [coords, setCoords] = useState(puntoInicial);\r\n\r\n    const setRef = useCallback((node) => {\r\n        mapDiv.current = node;\r\n    }, []);\r\n\r\n    // Funcion para agregar marcador\r\n    const agregarMarcador = useCallback((event, id) => {\r\n\r\n        //Para comprobar si el elemento tiene lnglat\r\n        const {lng, lat} = event.lngLat || event;\r\n\r\n        const marker = new mapboxgl.Marker();\r\n        marker.id = id ?? v4();\r\n\r\n        //Propiedades del Marcador\r\n        marker\r\n            .setLngLat([lng, lat])\r\n            .addTo( mapa.current )\r\n            .setDraggable( true );\r\n\r\n        // Agregando item a la Lista de Marcadores\r\n        marcadores.current[marker.id] = marker;\r\n\r\n        // Si el marcador no tiene ID\r\n        if( !id ){\r\n            nuevoMarcador.current.next({\r\n                id: marker.id,\r\n                lng,\r\n                lat,\r\n            });\r\n        }\r\n\r\n        // Obteniendo coordenadas del marcador seleccionado\r\n        marker.on('drag', ( event ) => {\r\n            const { id } = event.target;\r\n            const { lng, lat } = event.target.getLngLat();\r\n            \r\n            // Emitir el movimiento del Marcador\r\n            movimientoMarcador.current.next({\r\n                id,\r\n                lng,\r\n                lat,\r\n            });\r\n        });\r\n\r\n    }, []);\r\n\r\n    //Funcion para actualizar la ubicacion del Marcador\r\n    const actualizacionPosicion = useCallback(({ id, lng, lat }) => {\r\n        marcadores.current[id].setLngLat([ lng, lat ]);\r\n    }, []);\r\n\r\n    // Efecto para inicializar el MAPA y guardarlo en memoria\r\n    useEffect(() => {\r\n        const map = new mapboxgl.Map({\r\n            container: mapDiv.current,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [puntoInicial.lng, puntoInicial.lat],\r\n            zoom: puntoInicial.zoom,\r\n        });\r\n\r\n        mapa.current = map;\r\n    }, [puntoInicial]);\r\n\r\n    // Efecto cuando el usuario se mueve por el MAPA\r\n    useEffect(() => {\r\n        mapa.current?.on('move',  () => {\r\n            const {lng, lat} = mapa.current.getCenter();\r\n            setCoords({\r\n                lng: lng.toFixed(4),\r\n                lat: lat.toFixed(4),\r\n                zoom: mapa.current.getZoom().toFixed(2),\r\n            })\r\n        });\r\n\r\n    }, []);\r\n\r\n    // Efecto para agregar Marcador\r\n    useEffect(() => {\r\n        mapa.current?.on('click', agregarMarcador);\r\n    }, [agregarMarcador]);\r\n\r\n    return {\r\n        coords,\r\n        agregarMarcador,\r\n        setRef,\r\n        marcadores,\r\n        nuevoMarcador$: nuevoMarcador.current,\r\n        movimientoMarcador$: movimientoMarcador.current,\r\n        actualizacionPosicion,\r\n    }\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { SocketContext } from '../context/SocketContext';\r\nimport { useMapbox } from '../hooks/useMapbox';\r\n\r\nconst puntoInicial = {\r\n    lng: -71.5331,\r\n    lat: -16.4307,\r\n    zoom: 15,\r\n}\r\n\r\nexport const MapaPage = () => {\r\n    const { \r\n        coords, \r\n        setRef, \r\n        nuevoMarcador$, \r\n        movimientoMarcador$, \r\n        agregarMarcador, \r\n        actualizacionPosicion \r\n    } = useMapbox(puntoInicial);\r\n\r\n    const { socket } = useContext( SocketContext );\r\n\r\n    // Marcadores Existentes\r\n    useEffect(() => {\r\n        socket.on('marcadores-activos', (marcadores) => {\r\n            for( const key of Object.keys( marcadores ) ){\r\n                agregarMarcador( marcadores[key], key );\r\n            }\r\n        });\r\n    }, [socket, agregarMarcador]);\r\n\r\n    //Movimiento del Marcador\r\n    useEffect(() => {\r\n        movimientoMarcador$.subscribe( marcador => {\r\n            socket.emit('marcador-actualizado', marcador);\r\n        })\r\n    }, [movimientoMarcador$, socket]);\r\n\r\n    //Mover marcador mediante SOCKETS\r\n    useEffect(() => {\r\n        socket.on('marcador-actualizado', (marcador) => {\r\n            actualizacionPosicion(marcador);\r\n        });\r\n    }, [socket, actualizacionPosicion])\r\n\r\n    //Nuevo Marcador - EMIT  - EMISOR\r\n    useEffect(() => {\r\n        nuevoMarcador$.subscribe( marcador => {\r\n            socket.emit('marcador-nuevo', marcador);\r\n        });\r\n    }, [nuevoMarcador$, socket]);\r\n\r\n    //Nuevo Marcador - ON - RECEPTOR\r\n    useEffect(() => {\r\n        socket.on('marcador-nuevo', ( marcador ) => {\r\n            agregarMarcador( marcador, marcador.id )\r\n        });\r\n    }, [socket, agregarMarcador]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"coords\">\r\n                lat: {coords.lat} | lng: {coords.lng} | zoom: {coords.zoom}\r\n            </div>\r\n            <div className=\"info\">\r\n                Mapa en tiempo Real - Rene Lozano\r\n            </div>\r\n            <div \r\n                className=\"mapContainer\"\r\n                ref={ setRef }\r\n            />\r\n        </>   \r\n    )\r\n}\r\n","import React from 'react';\r\nimport { SocketProvider } from './context/SocketContext';\r\nimport { MapaPage } from './pages/MapaPage';\r\n\r\nexport const MapsApp = () => {\r\n    return (\r\n        <SocketProvider>\r\n            <MapaPage/>\r\n        </SocketProvider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { MapsApp } from './MapsApp';\n\nReactDOM.render(\n  <MapsApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}